library(ggplot2)
g=ggplot(fin.df, aes(x=RATIO,y=HEAT,colour=RATIO))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("HEAT Vs RATIO")
#new plotting window
windows()
plot(HEAT~RATIO,bg="Blue",pch=21,ylim=c(0,max(HEAT)),xlim=c(0,3), data=fin.df)
#Load library
#make a new plot
library(s20x)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
#layout
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
#Lets look at where the plots will go
layout.show(4)
#Plot the data
with(fin.df,
plot(HEAT~RATIO,bg="Blue",pch=21,ylim=c(0,1.1*max(HEAT)),xlim=c(0,1.1*max(RATIO)))
)
mtext("Dr Stewart's plot",side=3)
# make a linear model
ht.lm=with(fin.df, lm(HEAT~RATIO))
#plot a least squares regression line
abline(ht.lm)
#make a new plot
with(fin.df,
plot(HEAT~RATIO,bg="Blue",pch=21,ylim=c(0,1.1*max(HEAT)),xlim=c(0,1.1*max(RATIO)))
)
#make yhat the estimates of E[HEAT | RATIO]
yhat=with(fin.df,predict(ht.lm,data.frame(RATIO)))
#OR you could use -- (yhat values the predicted values for all the RATIO values )
yhat=fitted(ht.lm)
# Draw in segments making the residuals (regression deviations)
with(fin.df,{
segments(RATIO,HEAT,RATIO,yhat)
})
abline(ht.lm)
#residual sum of squares
RSS=with(fin.df,sum((HEAT-yhat)^2))
RSS
#make a new plot
with(fin.df,
plot(HEAT~RATIO,bg="Blue",pch=21,ylim=c(0,1.1*max(HEAT)),xlim=c(0,1.1*max(RATIO)))
)
#make nieve model
with(fin.df, abline(h=mean(HEAT)))
abline(ht.lm)
#make the explained deviations (explained by the model)
with(fin.df, segments(RATIO,mean(HEAT),RATIO,yhat,col="Red"))
MSS=with(fin.df,sum((yhat-mean(HEAT))^2))
MSS
#Load library
#make a new plot
library(s20x)
trendscatter(HEAT~RATIO,f=0.7, data=fin.df)
#layout
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
#Lets look at where the plots will go
layout.show(4)
#Plot the data
# PLOT 1
with(fin.df,
plot(HEAT~RATIO,bg="Blue",pch=21,ylim=c(0,1.1*max(HEAT)),xlim=c(0,1.1*max(RATIO)))
)
mtext("Dr Stewart's plot",side=3)
# make a linear model
ht.lm=with(fin.df, lm(HEAT~RATIO))
#plot a least squares regression line
abline(ht.lm)
#make a new plot
# PLOT 2
with(fin.df,
plot(HEAT~RATIO,bg="Blue",pch=21,ylim=c(0,1.1*max(HEAT)),xlim=c(0,1.1*max(RATIO)))
)
#make yhat the estimates of E[HEAT | RATIO]
yhat=with(fin.df,predict(ht.lm,data.frame(RATIO)))
#OR you could use -- (yhat values the predicted values for all the RATIO values )
yhat=fitted(ht.lm)
# Draw in segments making the residuals (regression deviations)
with(fin.df,{
segments(RATIO,HEAT,RATIO,yhat)
})
abline(ht.lm)
abline(ht.lm)
#residual sum of squares
RSS=with(fin.df,sum((HEAT-yhat)^2))
RSS
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
abline(spruce.lm)
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make yhat the estimates of E[HEAT | RATIO]
yhat=with(spruce,predict(spruce.lm,data.frame(BHDiameter)))
#OR you could use -- (yhat values the predicted values for all the RATIO values )
yhat=fitted(spruce.lm)
# Draw in segments making the residuals (regression deviations)
with(spruce,{
segments(BHDiameter,Height,BHDiameter,yhat)
})
abline(spruce.lm)
#residual sum of squares
RSS=with(spruce,sum((Height-yhat)^2))
RSS
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
layout.show(4)
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
abline(spruce.lm)
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make yhat the estimates of E[HEAT | RATIO]
yhat=with(spruce,predict(spruce.lm,data.frame(BHDiameter)))
#OR you could use -- (yhat values the predicted values for all the RATIO values )
yhat=fitted(spruce.lm)
# Draw in segments making the residuals (regression deviations)
with(spruce,{
segments(BHDiameter,Height,BHDiameter,yhat)
})
abline(spruce.lm)
#residual sum of squares
RSS=with(spruce,sum((Height-yhat)^2))
RSS
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
abline(spruce.lm)
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make yhat the estimates of E[HEAT | RATIO]
yhat=with(spruce,predict(spruce.lm,data.frame(BHDiameter)))
#OR you could use -- (yhat values the predicted values for all the RATIO values )
yhat=fitted(spruce.lm)
# Draw in segments making the residuals (regression deviations)
with(spruce,{
segments(BHDiameter,Height,BHDiameter,yhat)
})
abline(spruce.lm)
#residual sum of squares
RSS=with(spruce,sum((Height-yhat)^2))
RSS
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
# Plot 1
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
abline(spruce.lm)
# Plot 2
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make yhat the estimates of E[HEAT | RATIO]
yhat=with(spruce,predict(spruce.lm,data.frame(BHDiameter)))
#OR you could use -- (yhat values the predicted values for all the RATIO values )
yhat=fitted(spruce.lm)
# Draw in segments making the residuals (regression deviations)
with(spruce,{
segments(BHDiameter,Height,BHDiameter,yhat)
})
abline(spruce.lm)
#residual sum of squares
RSS=with(spruce,sum((Height-yhat)^2))
RSS
# Plot 3
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make nieve model
with(spruce, abline(h=mean(Height)))
abline(spruce.lm)
#make the explained deviations (explained by the model)
with(spruce, segments(BHDiameter,mean(Height),BHDiameter,yhat,col="Red"))
MSS=with(spruce,sum((yhat-mean(Height))^2))
MSS
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
# Plot 1
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
abline(spruce.lm)
# Plot 2
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make yhat the estimates of E[HEAT | RATIO]
yhat=with(spruce,predict(spruce.lm,data.frame(BHDiameter)))
#OR you could use -- (yhat values the predicted values for all the RATIO values )
yhat=fitted(spruce.lm)
# Draw in segments making the residuals (regression deviations)
with(spruce,{
segments(BHDiameter,Height,BHDiameter,yhat)
})
abline(spruce.lm)
#residual sum of squares
RSS=with(spruce,sum((Height-yhat)^2))
RSS
# Plot 3
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make nieve model
with(spruce, abline(h=mean(Height)))
abline(spruce.lm)
#make the explained deviations (explained by the model)
with(spruce, segments(BHDiameter,mean(Height),BHDiameter,yhat,col="Red"))
MSS=with(spruce,sum((yhat-mean(Height))^2))
MSS
# Plot 4
with(spruce,
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce))
with(spruce,abline(h=mean(Height)))
with(spruce, segments(BHDiameter,Height,BHDiameter,mean(Height),col="Green"))
TSS=with(spruce,sum((Height-mean(Height))^2))
TSS
RSS + MSS
layout(matrix(1:4,nr=2,nc=2,byrow=TRUE))
# Plot 1
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
abline(spruce.lm)
# Plot 2
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make yhat the estimates of E[HEAT | RATIO]
yhat=with(spruce,predict(spruce.lm,data.frame(BHDiameter)))
#OR you could use -- (yhat values the predicted values for all the RATIO values )
yhat=fitted(spruce.lm)
# Draw in segments making the residuals (regression deviations)
with(spruce,{
segments(BHDiameter,Height,BHDiameter,yhat)
})
abline(spruce.lm)
# Plot 3
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce)
#make nieve model
with(spruce, abline(h=mean(Height)))
abline(spruce.lm)
#make the explained deviations (explained by the model)
with(spruce, segments(BHDiameter,mean(Height),BHDiameter,yhat,col="Red"))
# Plot 4
with(spruce,
plot(Height~BHDiameter, bg = "Blue", pch = 21, cex = 1.2, ylim = c(0, max(Height) * 1.1), xlim = c(0, max(BHDiameter) * 1.1), xlab = "Height", ylab = "BHDiameter", data = spruce))
with(spruce,abline(h=mean(Height)))
with(spruce, segments(BHDiameter,Height,BHDiameter,mean(Height),col="Green"))
TSS=with(spruce,sum((Height-mean(Height))^2))
MSS=with(spruce,sum((yhat-mean(Height))^2))
RSS=with(spruce,sum((Height-yhat)^2))
TSS
MSS
RSS
TSS=with(spruce,sum((Height-mean(Height))^2))
MSS=with(spruce,sum((yhat-mean(Height))^2))
RSS=with(spruce,sum((Height-yhat)^2))
print("TSS = " + TSS)
TSS=with(spruce,sum((Height-mean(Height))^2))
MSS=with(spruce,sum((yhat-mean(Height))^2))
RSS=with(spruce,sum((Height-yhat)^2))
cat("TSS = ", TSS)
MSS
RSS
TSS=with(spruce,sum((Height-mean(Height))^2))
MSS=with(spruce,sum((yhat-mean(Height))^2))
RSS=with(spruce,sum((Height-yhat)^2))
cat("TSS = ", TSS, "\n")
MSS
RSS
TSS=with(spruce,sum((Height-mean(Height))^2))
MSS=with(spruce,sum((yhat-mean(Height))^2))
RSS=with(spruce,sum((Height-yhat)^2))
cat("TSS = ", TSS, "\n")
cat("MSS = ", MSS, "\n")
cat("RSS = ", RSS, "\n")
DividedValue <- MSS / TSS
DividedValue
TSS
MSS + RSS
summarise(spruce.lm)
summarize(spruce.lm)
summary(spruce.lm)
predict(spruce.lm, Height, BHDiameter = 15)
predict(spruce.lm, spruce$Height, spruce$BHDiameter = 15)
predict(spruce.lm, spruce$Height, 15)
predict(spruce, newdata)
testdata <- c(15, 18, 20)
predict(spruce.lm, newdata = testdata)
testdata <- c(15, 18, 20)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(c(15, 18, 20))
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(c(15, 18, 20))
predict(spruce.lm, newdata = testdata, interval = 3)
testdata <- data.frame(c(15, 18, 20))
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 15))
testdata <- data.frame(BHDiameter = 15)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 15)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 18)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 20)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(c(15, 18, 20))
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 15)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 18)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 20)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(15)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 18)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 20)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 15)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 18)
predict(spruce.lm, newdata = testdata)
testdata <- data.frame(BHDiameter = 20)
predict(spruce.lm, newdata = testdata)
# USED FOR TASK 6
g=ggplot(spruce, aes(x=BHDiameter,y=Height,colour=BHDiameter))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("Height Vs BHDiameter")
#new plotting window
plot(Height~BHDiameter,bg="Blue",pch=21,ylim=c(0,max(Height)),xlim=c(0,3), data=spruce)
# USED FOR TASK 6
g=ggplot(spruce, aes(x=BHDiameter,y=Height,color=BHDiameter))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("Height Vs BHDiameter")
#new plotting window
plot(Height~BHDiameter,bg="Blue",pch=21,ylim=c(0,max(Height)),xlim=c(0,3), data=spruce)
# USED FOR TASK 6
g=ggplot(spruce, aes(x=BHDiameter,y=Height,color=BHDiameter))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("Height Vs BHDiameter")
#Using a new package
#Download and install ggplot2
# USED FOR TASK 6
library(ggplot2)
g=ggplot(fin.df, aes(x=RATIO,y=HEAT,colour=RATIO))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("HEAT Vs RATIO")
# USED FOR TASK 6
g=ggplot(spruce, aes(x=BHDiameter,y=Height,color=BHDiameter))
g=g+geom_point() + geom_line()
g+ggtitle("Height Vs BHDiameter")
# USED FOR TASK 6
g=ggplot(spruce, aes(x=BHDiameter,y=Height,color=BHDiameter))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("Height Vs BHDiameter")
#Using a new package
#Download and install ggplot2
# USED FOR TASK 6
library(ggplot2)
g=ggplot(fin.df, aes(x=RATIO,y=HEAT,colour=RATIO))
g=g+geom_point() + geom_line()+ geom_smooth()
g+ggtitle("HEAT Vs RATIO")
#Using a new package
#Download and install ggplot2
# USED FOR TASK 6
library(ggplot2)
g=ggplot(fin.df, aes(x=RATIO,y=HEAT,colour=RATIO))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("HEAT Vs RATIO")
curve(15n^2, from 0 to 20)
curve(15x^2, from 0 to 20)
curve(15*x^2, from 0 to 20)
curve(15*x^2, from = 0, to = 20)
curve(15*x^2, from = 0, to = 20)
curve(n, from = 0, to = 20)
curve(x, from = 0, to = 20)
curve(x = y, from = 0, to = 20)
curve(x, from = 0, to = 20)
curve(15*x^2, from = 0, to = 10)
curve(x, from = 0, to = 10)
curve(15*x^2, from = 2, to = 20)
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(n! from = 2, to = 20)
curve(choose(N, K), from = 2, to = 20)
curve(choose(X, K), from = 2, to = 20)
#choose(N, K)
#plot()
curve(factorial(x), from = 2, to = 20)
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20)
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(15*x^2, 1*x, from = 2, to = 20, col = "Red")
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, add = TRUE)
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
window();curve(15*x^2, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
window();curve(15*x^2, from = 2, to = 20, col = "Red")
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
curve(15*x^2, from = 2, to = 20, col = "Red", title = "T(x) vs. x")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot b
curve(8*x^3, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
#Plot c
curve(2^x, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot d
curve(3^x, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot e
curve(factorial(x), from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot f
curve(x * log2(x), from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
curve(log2(x), from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
curve(log2(x), from = 2, to = 100, col = "Red")
curve(1*x, from = 2, to = 100, col = "Blue", add = TRUE)
curve(log2(x), from = 2, to = 1000, col = "Red")
curve(1*x, from = 2, to = 1000, col = "Blue", add = TRUE)
curve(log2(x), from = 2, to = 10000, col = "Red")
curve(1*x, from = 2, to = 10000, col = "Blue", add = TRUE)
curve(x^2, from = 2, to = 100, col = "Red")
curve(1*x, from = 2, to = 100, col = "Blue", add = TRUE)
# Plot g
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(8*x^3, from = 2, to = 20, col = "Blue", add = TRUE)
curve(2^x, from = 2, to = 20, col = "Yellow", add = TRUE)
curve(3^x, from = 2, to = 20, col = "Green", add = TRUE)
curve(factorial(x), from = 2, to = 20, col = "Orange", add = TRUE)
curve(x * log2(x), from = 2, to = 20, col = "Purple", add = TRUE)
curve(1*x, from = 2, to = 20, col = "Brown", add = TRUE)
fin.df = read.csv("FINTUBES.csv")
#Top six lines
head(fin.df)
#initial plot, compare to get perspective ranges and intercepts
with(fin.df,  {
layout(matrix(1:2,nr=2))
plot(HEAT~RATIO,bg="Blue",pch=21)
plot(HEAT~RATIO,bg="Blue",pch=21,ylim=c(0,max(HEAT)),xlim=c(0,3))
}
)
#Using a new package
#Download and install ggplot2
# USED FOR TASK 6
library(ggplot2)
g=ggplot(fin.df, aes(x=RATIO,y=HEAT,colour=RATIO))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("HEAT Vs RATIO")
#new plotting window
windows()
plot(HEAT~RATIO,bg="Blue",pch=21,ylim=c(0,max(HEAT)),xlim=c(0,3), data=fin.df)
#Using a new package
#Download and install ggplot2
# USED FOR TASK 6
library(ggplot2)
g=ggplot(fin.df, aes(x=RATIO,y=HEAT,colour=RATIO))
g=g+geom_point() + geom_line()+ geom_smooth(method="lm")
g+ggtitle("HEAT Vs RATIO")
# Plot a
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot b
curve(8*x^3, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot c
curve(2^x, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot d
curve(3^x, from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot e
curve(factorial(x), from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot f
curve(x * log2(x), from = 2, to = 20, col = "Red")
curve(1*x, from = 2, to = 20, col = "Blue", add = TRUE)
# Plot g
curve(15*x^2, from = 2, to = 20, col = "Red")
curve(8*x^3, from = 2, to = 20, col = "Blue", add = TRUE)
curve(2^x, from = 2, to = 20, col = "Yellow", add = TRUE)
curve(3^x, from = 2, to = 20, col = "Green", add = TRUE)
curve(factorial(x), from = 2, to = 20, col = "Orange", add = TRUE)
curve(x * log2(x), from = 2, to = 20, col = "Purple", add = TRUE)
curve(1*x, from = 2, to = 20, col = "Brown", add = TRUE)
# Plot h
curve(1/2 * x^2, from = 0, to = 40, col = "Red")
curve((6 * x * log2(x)) + 6 * x, from = 0, to = 40, col = "Blue", add = TRUE)
#
#
# Plot h
curve(1/2 * x^2, from = 0, to = 100, col = "Red")
curve((6 * x * log2(x)) + 6 * x, from = 0, to = 100, col = "Blue", add = TRUE)
# Plot h
curve(1/2 * x^2, from = 0, to = 85, col = "Red")
curve((6 * x * log2(x)) + 6 * x, from = 0, to = 85, col = "Blue", add = TRUE)
# Plot h
curve(1/2 * x^2, from = 0, to = 90, col = "Red")
curve((6 * x * log2(x)) + 6 * x, from = 0, to = 90, col = "Blue", add = TRUE)
# Plot h
curve(1/2 * x^2, from = 0, to = x, col = "Red")
curve((6 * x * log2(x)) + 6 * x, from = 0, to = x, col = "Blue", add = TRUE)
# Plot h
curve(1/2 * x^2, from = 0, to = 90, col = "Red")
curve((6 * x * log2(x)) + 6 * x, from = 0, to = 90, col = "Blue", add = TRUE)
# Plot h
curve(1/2 * x^2, from = 0, to = 100, col = "Red")
curve((6 * x * log2(x)) + 6 * x, from = 0, to = 100, col = "Blue", add = TRUE)
# Plot h
curve(0.5 * x^2, from = 0, to = 100, col = "Red")
curve((6 * x * log2(x)) + 6 * x, from = 0, to = 100, col = "Blue", add = TRUE)
# Plot h
curve(0.5 * x^2, from = 0, to = 100, col = "Red")
curve(6 * x * log2(x) + 6 * x, from = 0, to = 100, col = "Blue", add = TRUE)
# Plot h
curve(0.5 * x^2, from = 0, to = 30, col = "Red")
curve(6 * x * log2(x) + 6 * x, from = 0, to = 30, col = "Blue", add = TRUE)
# Plot h
curve(0.5 * x^2, from = 0, to = 90, col = "Red")
curve(6 * x * log2(x) + 6 * x, from = 0, to = 90, col = "Blue", add = TRUE)
# Plot h
curve(0.5 * x^2, from = 0, to = 90, col = "Red")
curve(6 * x * log10(x) + 6 * x, from = 0, to = 90, col = "Blue", add = TRUE)
# Plot h
curve(0.5 * x^2, from = 0, to = 600, col = "Red")
curve(6 * x * log10(x) + 6 * x, from = 0, to = 600, col = "Blue", add = TRUE)
# Plot h
curve(0.5 * x^2, from = 0, to = 30, col = "Red")
curve(6 * x * log10(x) + 6 * x, from = 0, to = 30, col = "Blue", add = TRUE)
